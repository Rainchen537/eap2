version: '3.8'

services:
  # Redis缓存（内部使用，不暴露端口）
  redis:
    image: redis:7-alpine
    container_name: quizonly-redis
    restart: unless-stopped
    # 移除端口映射，只在容器内部使用
    volumes:
      - redis_data:/data
    networks:
      - quizonly-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 20s
      retries: 10

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: quizonly-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    environment:
      NODE_ENV: production
      DB_HOST: 45.221.115.62
      DB_PORT: ${DB_PORT:-3306}
      DB_USERNAME: root
      DB_PASSWORD: mysql_DkX6wK
      DB_DATABASE: aiagent
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GEMINI_API_BASE_URL: ${GEMINI_API_BASE_URL}
      GEMINI_MODEL: ${GEMINI_MODEL}
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - quizonly-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      timeout: 20s
      retries: 10

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: quizonly-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - quizonly-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      timeout: 20s
      retries: 10

networks:
  quizonly-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
