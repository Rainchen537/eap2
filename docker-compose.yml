version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: eap2-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-password}
      MYSQL_DATABASE: ${DB_DATABASE:-eap2}
      MYSQL_USER: ${DB_USERNAME:-eap2user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - eap2-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis缓存（可选）
  redis:
    image: redis:7-alpine
    container_name: eap2-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - eap2-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: eap2-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USERNAME: ${DB_USERNAME:-eap2user}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_DATABASE: ${DB_DATABASE:-eap2}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-here}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-here}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      GEMINI_API_KEY: ${GEMINI_API_KEY:-sk-quizonly}
      GEMINI_API_BASE_URL: ${GEMINI_API_BASE_URL:-https://nnhentyqsfgw.ap-northeast-1.clawcloudrun.com}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost}
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - eap2-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      timeout: 10s
      retries: 3
      start_period: 30s

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: eap2-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - eap2-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local

networks:
  eap2-network:
    driver: bridge
